/* jshint -W097 */// jshint strict:false
/*jslint node: true */
"use strict";

var express =           require('express');
var request =           require('request');
var fs =                require('fs');
var Stream =            require('stream');
var config =            JSON.parse(fs.readFileSync(__dirname + '/../../conf/iobroker.json'));

var session;// =           require('express-session');
var cookieParser;// =      require('cookie-parser');
var bodyParser;// =        require('cookie-parser');
var bodyParser;// =        require('body-parser');
var AdapterStore;// =      require(__dirname + '/../../lib/session.js')(session);
var passportSocketIo;// =  require(__dirname + "/lib/passport.socketio.js");
var password;// =          require(__dirname + '/../../lib/password.js');
var passport;// =          require('passport');
var LocalStrategy;// =     require('passport-local').Strategy;
var flash;// =             require('connect-flash'); // TODO report error to user

var webServer =  null;
var store =      null;
var objects =    {};
var states =     {};
var secret =     'Zgfr56gFe87jJOM'; // Will be generated by first start

var adapter = require(__dirname + '/../../lib/adapter.js')({
    name:           'web',
    install: function (callback) {
        if (typeof callback === 'function') callback();
    },
    objectChange: function (id, obj) {
        objects[id] = obj;
        if (webServer) webServer.io.sockets.emit('objectChange', id, obj);
    },
    stateChange: function (id, state) {
        states[id] = state;
        if (webServer) webServer.io.sockets.emit('stateChange', id, state);
    },
    unload: function (callback) {
        try {
            adapter.log.info("terminating http" + (webServer.settings.secure ? "s" : "") + " server on port " + webServer.settings.port);
            webServer.server.close();

            callback();
        } catch (e) {
            callback();
        }
    },
    ready: function () {
        adapter.getForeignObject("system.adapter.admin", function (err, obj) {
            if (!err && obj) {
                if (!obj.native.secret) {
                    require('crypto').randomBytes(24, function (ex, buf) {
                        secret = buf.toString('hex');
                        adapter.extendForeignObject("system.adapter.admin", {native: {secret: secret}});
                        main();
                    });
                } else {
                    secret = obj.native.secret;
                    main();
                }
            } else {
                adapter.logger.error("Cannot find object system.adapter.admin");
            }
        });
    }
});

function main() {
    webServer = initWebServer(adapter.config);
}

//settings: {
//    "port":   8080,
//    "auth":   false,
//    "secure": false,
//    "bind":   "0.0.0.0", // "::"
//    "cache":  false
//}
function initWebServer(settings) {

    var server = {
        app:       null,
        server:    null,
        io:        null,
        settings:  settings
    };

    if (settings.port) {
        var options = null;

        if (settings.secure) {
            var _fs = require('fs');
            try {
                options = {
                    // ToDO read certificates from CouchDB (May be upload in admin configuration page)
                    key:  _fs.readFileSync(__dirname + '/cert/privatekey.pem'),
                    cert: _fs.readFileSync(__dirname + '/cert/certificate.pem')
                };
            } catch (err) {
                adapter.log.error(err.message);
            }
            if (!options) return null;
        }
        server.app = express();
        if (settings.auth) {
        }

        var appOptions = {};
        if (settings.cache) {
            appOptions.maxAge = 30758400000;
        }

        if (settings.secure) {
            server.server = require('https').createServer(options, server.app);
        } else {
            server.server = require('http').createServer(server.app);
        }
        server.server.__server = server;
    } else {
        adapter.log.error('port missing');
        process.exit(1);
    }

    if (server.server) {
        adapter.getPort(settings.port, function (port) {
            if (port != settings.port && !adapter.config.findNextPort) {
                adapter.log.error('port ' + settings.port + ' already in use');
                process.exit(1);
            }
            server.server.listen(port);
            adapter.log.info("http" + (settings.secure ? "s" : "") + " server listening on port " + port);
        });
    }

    if (server.server) {
        return server;
    } else {
        return null;
    }
}